// Responsive breakpoints

@mixin breakpoint ($value, $min-value: null) {

  @if $value == 'phone-small' {
    @media only screen and (max-width: 330px) { @content }
  }

  @else if $value == 'phone' {
    @media only screen and (max-width: 750px) { @content }
  }

  @else if $value == 'to-tablet-p' {
    @media only screen and (max-width: 900px) { @content }
  }

  @else if $value == 'tablet-p' {
    @media only screen and (min-width: 751px) and (max-width: 900px) { @content }
  }

  @else if $value == 'tablet-l' {
    @media only screen and (min-width: 901px) and (max-width: 1199px) { @content }
  }

  @else if $value == 'from-tablet-l' {
    @media only screen and (min-width: 901px) { @content }
  }

  @else if $value == 'to-tablet' {
    @media only screen and (max-width: 1199px) { @content }
  }

  @else if $value == 'tablet' {
    @media only screen and (min-width: 751px) and (max-width: 1199px) { @content }
  }

  @else if $value == 'from-tablet' {
    @media only screen and (min-width: 751px) { @content }
  }

  @else if $value == 'to-laptop' {
    @media only screen and (max-width: 1600px) { @content }
  }

  @else if $value == 'laptop' {
    @media only screen and (min-width: 1200px) and (max-width: 1600px) { @content }
  }

  @else if $value == 'from-laptop' {
    @media only screen and (min-width: 1200px) { @content }
  }

  @else if $value == 'desktop' {
    @media only screen and (min-width: 1601px) { @content }
  }

  @else if $min-value != null {
    @media only screen and (min-width: $min-value) and (max-width: $value) { @content }
  }

  @else {
    @media only screen and (max-width: $value) { @content }
  }
}

// Simple flexbox grid
// @param {Unit} $gutter-x
// @param {Unit} $gutter-y

@mixin row  ($gutter-x: null, $gutter-y: null) {
  display: flex;
  flex-wrap: wrap;
  margin-left: $gutter-x / -2;
  margin-right: $gutter-x /-2;
  @if $gutter-y != null {
    margin-bottom: $gutter-y;
  }

  & > * {
    padding-left: $gutter-x / 2;
    padding-right: $gutter-x / 2;
  }
}

@mixin col ($width: auto) {
  width: $width;
}

// Evenly space child elements horizontally
// @param {Unit} $gutter - Margin between `*`

@mixin evenly-space-children($gutter) {
  & > *:not(:last-child) {
    margin-right: $gutter;
  }
}
